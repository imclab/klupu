#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# klupu - scrape meeting minutes of governing bodies of city of Jyväskylä
# Copyright (C) 2012 Tuomas Jorma Juhani Räsänen <tuomasjjrasanen@tjjr.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import datetime
import glob
import itertools
import os.path
import re
import sys

from bs4 import BeautifulSoup

RE_DATE = re.compile(r"^\D*(\d\d?)\.(\d\d?)\.(\d{4})\D+")
RE_TIME = re.compile(r"(\d\d)\.(\d\d)\D+(\d\d)\.(\d\d)")
RE_PERSON = re.compile(r"^(\w+(?:-\w+)*(?: \w+(?:-\w+)*)+)")
RE_PRESENCE_MARK = re.compile(r"^(–.*)?x[\xa0 ]+")
FILENAME_INFO = "htmtxt0.htm"

def iter_issue_filepaths(minutes_dirpath):
    pathname = os.path.join(minutes_dirpath, "htmtxt*.htm")
    for issue_filepath in glob.iglob(pathname):
        if os.path.basename(issue_filepath) != FILENAME_INFO:
            yield issue_filepath

def cleanws(text):
    text = re.sub(r"[ ]+", " ", text)
    text = re.sub(r"\xa0+", "\xa0", text)
    return re.sub(r"[\r\n]", "", text)

def warn(msg):
    print("%s: warning: %s" % (os.path.basename(__file__), msg),
          file=sys.stderr)

def thresh_meetinginfo(soup):
    markerspan = soup(text=re.compile("KOKOUSTIEDOT"))[0].parent
    ps = markerspan.parent.parent.parent("td")[1]("p")

    datetimes, place = [cleanws(p.text) for p in ps][1:]

    # TODO: handle constant timezone + variable DST
    date_match = RE_DATE.match(datetimes)
    day, month, year = [int(v) for v in date_match.groups()]
    starttimes = []
    endtimes = []
    for times in RE_TIME.findall(datetimes, date_match.end()):
        starthour, startminutes, endhour, endminutes = [int(v) for v in times]
        endhour %= 24 # Someone uses stupid format to denote that this
                      # is part of the yesterday..
        starttime = datetime.datetime(year, month, day, starthour, startminutes)
        endtime = datetime.datetime(year, month, day, endhour, endminutes)
        if starttime > endtime:
            # If the end-time is after midnight, add one day to the
            # date part.
            endtime += datetime.timedelta(1)
        starttimes.append(starttime)
        endtimes.append(endtime)

    return place, starttimes, endtimes

def thresh_persons(td):
    persons = []
    for line in [cleanws(p.text) for p in td("p")]:
        if not line:
            continue

        presence_mark_match = RE_PRESENCE_MARK.match(line)
        if not presence_mark_match:
            warn("skipping line %r" % line)
            continue

        person_match = RE_PERSON.match(line[presence_mark_match.end():])
        persons.append(person_match.group(1))

    return persons

def thresh(minutes_dirpath):
    minutes_dirpath = os.path.normpath(minutes_dirpath)
    info_filepath = os.path.join(minutes_dirpath, FILENAME_INFO)
    with open(info_filepath, encoding="windows-1252") as info_file:
        info_soup = BeautifulSoup(info_file, features=["lxml"])

    tds = info_soup.body("table")[1]("td")[1::2]

    place, starttime, endtime = thresh_meetinginfo(info_soup)
    decisionmakers = thresh_persons(tds[1])
    others = thresh_persons(tds[2])

    minutes = {
        "place": place,
        "start-time": starttime,
        "end-time": endtime,
        "decision-makers": decisionmakers,
        "others": others,
        }

    return minutes

def _main():
    grains = thresh(sys.argv[1])
    for key, value in grains.items():
        print(key, ":", value)

if __name__ == "__main__":
    _main()
